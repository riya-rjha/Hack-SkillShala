[
  {
    "id": 1,
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array, Hash Map",
    "difficulty": "Easy",
    "functionSignature": {
      "javascript": "function twoSum(nums, target) {\n  // Your code here\n}",
      "java": "public class Solution {\n  public int[] twoSum(int[] nums, int target) {\n    // Your code here\n  }\n}"
    },
    "testCases": [
      { "input": { "nums": [2, 7, 11, 15], "target": 9 }, "expected": [0, 1] },
      { "input": { "nums": [3, 2, 4], "target": 6 }, "expected": [1, 2] },
      { "input": { "nums": [3, 3], "target": 6 }, "expected": [0, 1] }
    ]
  },
  {
    "id": 2,
    "title": "Reverse String",
    "description": "Write a function that reverses a string. The input string is given as an array of characters s. You must do this by modifying the input array in-place with O(1) extra memory.",
    "topic": "Two Pointers, String",
    "difficulty": "Easy",
    "functionSignature": {
      "javascript": "function reverseString(s) {\n  // Your code here\n}",
      "java": "public class Solution {\n  public void reverseString(char[] s) {\n    // Your code here\n  }\n}"
    },
    "testCases": [
      {
        "input": { "s": ["h", "e", "l", "l", "o"] },
        "expected": ["o", "l", "l", "e", "h"]
      },
      {
        "input": { "s": ["H", "a", "n", "n", "a", "h"] },
        "expected": ["h", "a", "n", "n", "a", "H"]
      }
    ]
  },
  {
    "id": 3,
    "title": "Palindrome Number",
    "description": "Given an integer x, return true if x is a palindrome, and false otherwise.",
    "topic": "Math",
    "difficulty": "Easy",
    "functionSignature": {
      "javascript": "function isPalindrome(x) {\n  // Your code here\n}",
      "java": "public class Solution {\n  public boolean isPalindrome(int x) {\n    // Your code here\n  }\n}"
    },
    "testCases": [
      { "input": { "x": 121 }, "expected": true },
      { "input": { "x": -121 }, "expected": false },
      { "input": { "x": 10 }, "expected": false }
    ]
  },
  {
    "id": 4,
    "title": "Merge Two Sorted Lists",
    "description": "You are given the heads of two sorted linked lists list1 and list2. Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.",
    "topic": "Linked List, Recursion",
    "difficulty": "Easy",
    "functionSignature": {
      "javascript": "function mergeTwoLists(list1, list2) {\n  // Your code here\n}",
      "java": "public class Solution {\n  public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n    // Your code here\n  }\n}"
    },
    "testCases": [
      {
        "input": { "list1": [1, 2, 4], "list2": [1, 3, 4] },
        "expected": [1, 1, 2, 3, 4, 4]
      },
      { "input": { "list1": [], "list2": [] }, "expected": [] },
      { "input": { "list1": [], "list2": [0] }, "expected": [0] }
    ]
  },
  {
    "id": 5,
    "title": "Valid Parentheses",
    "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if: 1. Open brackets are closed by the same type of brackets. 2. Open brackets are closed in the correct order.",
    "topic": "Stack, String",
    "difficulty": "Easy",
    "functionSignature": {
      "javascript": "function isValid(s) {\n  // Your code here\n}",
      "java": "public class Solution {\n  public boolean isValid(String s) {\n    // Your code here\n  }\n}"
    },
    "testCases": [
      { "input": { "s": "()" }, "expected": true },
      { "input": { "s": "()[]{}" }, "expected": true },
      { "input": { "s": "(]" }, "expected": false }
    ]
  },
  {
    "id": 6,
    "title": "Climbing Stairs",
    "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
    "topic": "Dynamic Programming",
    "difficulty": "Easy",
    "functionSignature": {
      "javascript": "function climbStairs(n) {\n  // Your code here\n}",
      "java": "public class Solution {\n  public int climbStairs(int n) {\n    // Your code here\n  }\n}"
    },
    "testCases": [
      { "input": { "n": 2 }, "expected": 2 },
      { "input": { "n": 3 }, "expected": 3 },
      { "input": { "n": 5 }, "expected": 8 }
    ]
  }
]
